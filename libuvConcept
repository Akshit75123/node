//video-41 (Network IO)
const https = require("node:https");

const MAX_CALLS = 1;

const start = Date.now();
for (let i = 0; i < MAX_CALLS; i++) {
  https.request("https://www.google.com", (res) => {
    res.on("data", () => {});
    res.on("end", () => { 
      console.log(`Request: ${i + 1}`, Date.now() - start);
    });
  });
}
//https.request does not use libuv's thread pool
//https.request does not get affected by the number of CPU cores.


//video-39 (thread pool)

// const crypto = require("node:crypto");

// //increasing the thread pool size
// process.env.UV_THREADPOOL_SIZE = 2;

// //pkdf2 async
// const MAX_CALLS = 1;
// //size of thread pool is 4
// const start = Date.now();
// for (let i = 0; i < MAX_CALLS; i++) {
//   crypto.pbkdf2("password", "salt", 100000, 512, "sha512", () => {
//     console.log(`Hash: ${i + 1}`, Date.now() - start);
//   });
// }
//pkdf2 sync
// crypto.pbkdf2Sync("password", "salt", 100000, 512, "sha512"); //password based key derivation function 2
// console.log("Hash: ", Date.now() - start);

// const fs = require("node:fs");

// console.log("first");

// fs.readFile("./file.txt", "utf-8", (err, data) => {
//   console.log("File Content");
// });

// console.log("last");
